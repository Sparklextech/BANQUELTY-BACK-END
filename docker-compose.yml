# Docker Compose configuration for Banquet App Backend
services:
  postgres:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  gateway:
    build: ./gateway
    restart: always
    ports:
      - "${GATEWAY_PORT:-4010}:${GATEWAY_PORT:-4010}"
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT:-4010}
      JWT_SECRET: ${JWT_SECRET}
      AUTH_SERVICE_URL: http://auth-service:4001
      VENUE_SERVICE_URL: http://venue-service:4002
      VENDOR_SERVICE_URL: http://vendor-service:4003
      ADMIN_SERVICE_URL: http://admin-service:4004
      BOOKING_SERVICE_URL: http://booking-service:4005
      NOTIFICATION_SERVICE_URL: http://notification-service:4007
      MEDIA_SERVICE_URL: http://media-service:4006
      SERVICE_PROVIDER_SERVICE_URL: http://service-provider-service:4008
    depends_on:
      auth-service:
        condition: service_healthy
      venue-service:
        condition: service_healthy
      vendor-service:
        condition: service_healthy
      admin-service:
        condition: service_healthy
      booking-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      media-service:
        condition: service_healthy
      service-provider-service:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4010/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth-service:
    build: ./services/auth-service
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      JWT_SECRET: ${JWT_SECRET}
      AUTH_SERVICE_PORT: 4001
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    ports:
      - "4001:4001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/api/auth/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  venue-service:
    build: ./services/venue-service
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      JWT_SECRET: ${JWT_SECRET}
      VENUE_SERVICE_PORT: 4002
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    ports:
      - "4002:4002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4002/api/venue/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  vendor-service:
    build: ./services/vendor-service
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      JWT_SECRET: ${JWT_SECRET}
      VENDOR_SERVICE_PORT: 4003
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    ports:
      - "4003:4003"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4003/api/vendor/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  admin-service:
    build: ./services/admin-service
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_SERVICE_PORT: 4004
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    ports:
      - "4004:4004"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4004/api/admin/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  booking-service:
    build: ./services/booking-service
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      JWT_SECRET: ${JWT_SECRET}
      BOOKING_SERVICE_PORT: 4005
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    ports:
      - "4005:4005"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4005/api/booking/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    build: ./services/notification-service
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      JWT_SECRET: ${JWT_SECRET}
      NOTIFICATION_SERVICE_PORT: 4007
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    ports:
      - "4007:4007"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  media-service:
    build: ./services/media-service
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      JWT_SECRET: ${JWT_SECRET}
      MEDIA_SERVICE_PORT: 4006
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    ports:
      - "4006:4006"
    volumes:
      - ./uploads:/usr/src/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  service-provider-service:
    build: ./services/service-provider-service
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      JWT_SECRET: ${JWT_SECRET}
      SERVICE_PROVIDER_SERVICE_PORT: 4008
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    ports:
      - "4008:4008"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4008/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  pgdata:

networks:
  backend:
    driver: bridge